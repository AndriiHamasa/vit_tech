/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–æ–º
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */

function fixImageUrl(url) {
    if (!url) return '/images/placeholder.jpg';
    
    // –ï—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∫–ª–µ–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    if (url.includes('https') && url.split('https').length > 2) {
        // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ 'https'
        const parts = url.split('https');
        // –ë–µ—Ä—ë–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å (–∏–Ω–¥–µ–∫—Å 2, —Ç.–∫. parts[0] –ø—É—Å—Ç–æ–π)
        let secondPart = parts[2];
        
        // –ó–∞–º–µ–Ω—è–µ–º %3A/ –Ω–∞ ://
        secondPart = secondPart.replace('%3A/', '://');
        
        // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
        return 'https' + secondPart;
    }
    
    return url;
}

class ProductsManager {
    constructor(options = {}) {
        // ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ—Ä—ë–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        this.categoryId = options.categoryId || null;
        
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        this.container = document.querySelector(options.containerSelector || '#products-container');
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        this.currentPage = 1;
        this.itemsPerPage = 20;
        this.hasMorePages = true;
        this.isLoading = false;
        
        // –§–∏–ª—å—Ç—Ä—ã
        this.filters = {
            status: options.status || null,
            search: options.search || null
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    async init() {
        if (!this.container) {
            console.error('Products container not found!');
            return;
        }

        // –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        this.createStructure();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await this.loadProducts();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Å–∫—Ä–æ–ª–ª–∏–Ω–≥
        this.setupInfiniteScroll();
    }

    /**
     * –°–æ–∑–¥–∞—ë–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
     */
    createStructure() {
        this.container.innerHTML = `
            <div class="products-grid"></div>
            <div class="products-loader">
                <div class="spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</p>
            </div>
            <div class="products-empty" style="display: none;">
                <div class="products-empty-icon">üì¶</div>
                <p class="products-empty-text">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            </div>
        `;

        this.gridElement = this.container.querySelector('.products-grid');
        this.loaderElement = this.container.querySelector('.products-loader');
        this.emptyElement = this.container.querySelector('.products-empty');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
     */
    async loadProducts() {
        if (this.isLoading || !this.hasMorePages) {
            return;
        }

        this.isLoading = true;
        this.showLoader();

        try {
            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            const params = {
                page: this.currentPage,
                limit: this.itemsPerPage
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.categoryId) {
                params.category = this.categoryId;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if (this.filters.status) {
                params.status = this.filters.status;
            }
            if (this.filters.search) {
                params.search = this.filters.search;
            }

            // –ó–∞–ø—Ä–æ—Å –∫ API
            const response = await apiClient.getProducts(params);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (response.results && response.results.length > 0) {
                this.renderProducts(response.results);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â—ë —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                this.hasMorePages = response.next !== null;
                this.currentPage++;
            } else if (this.currentPage === 1) {
                // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç
                this.showEmpty();
            }

        } catch (error) {
            console.error('Failed to load products:', error);
            this.showError();
        } finally {
            this.isLoading = false;
            this.hideLoader();
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
     */
    renderProducts(products) {
        products.forEach(product => {
            const card = this.createProductCard(product);
            this.gridElement.appendChild(card);
        });

        // –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –µ—Å—Ç—å
        if (this.gridElement.children.length > 0) {
            this.emptyElement.style.display = 'none';
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
     */
    // createProductCard(product) {
    //     const card = document.createElement('div');
    //     card.className = 'product-card';
    //     card.dataset.productId = product.id;

    //     // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    //     // const mainImage = product.images && product.images.length > 0
    //     //     ? product.images[0].image
    //     //     : '/images/placeholder.jpg'; // –ü—É—Ç—å –∫ –∑–∞–≥–ª—É—à–∫–µ

    //     // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∫–∞—Ä—Ç–∏–Ω–∫–∏
    //     let mainImage = '/images/placeholder.jpg';
    //     if (product.images && product.images.length > 0) {
    //         let imageUrl = product.images[0].image;
            
    //         // –§–∏–∫—Å —Å–∫–ª–µ–µ–Ω–Ω—ã—Ö URL
    //         if (imageUrl.includes('https://') && imageUrl.match(/https:\/\//g).length > 1) {
    //             const parts = imageUrl.split('https://');
    //             imageUrl = 'https://' + parts[2];
    //         }
            
    //         mainImage = imageUrl;
    //     }

    //     // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—Å—Ç—å –ª–∏ –±–µ–π–¥–∂
    //     let badgeHTML = '';
    //     if (product.status_display && product.status !== 'in_stock') {
    //         const badgeClass = product.status === 'new' ? 'new' : 'sale';
    //         badgeHTML = `<div class="product-badge ${badgeClass}">${product.status_display}</div>`;
    //     }

    //     card.innerHTML = `
    //         <div class="product-image-container">
    //             ${badgeHTML}
    //             <img 
    //                 src="${mainImage}" 
    //                 alt="${product.title}"
    //                 class="product-image"
    //                 loading="lazy"
    //             >
    //         </div>
    //         <div class="product-info">
    //             <div class="product-category">${product.category_name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}</div>
    //             <h3 class="product-title">${product.title}</h3>
    //             <div class="product-price">${this.formatPrice(product.price)}</div>
    //         </div>
    //     `;

    //     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    //     card.addEventListener('click', () => {
    //         this.openProductDetail(product.id);
    //     });

    //     return card;
    // }

    createProductCard(product) {
        const card = document.createElement('div');
        card.className = 'product-card';
        card.dataset.productId = product.id;
    
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∫–∞—Ä—Ç–∏–Ω–∫–∏
        let mainImage = '/images/placeholder.jpg';
        if (product.images && product.images.length > 0) {
            mainImage = fixImageUrl(product.images[0].image);
        }
    
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–µ–π–¥–∂
        let badgeHTML = '';
        if (product.status_display && product.status !== 'in_stock') {
            const badgeClass = product.status === 'new' ? 'new' : 'sale';
            badgeHTML = `<div class="product-badge ${badgeClass}">${product.status_display}</div>`;
        }
    
        card.innerHTML = `
            <div class="product-image-container">
                ${badgeHTML}
                <img 
                    src="${mainImage}" 
                    alt="${product.title}"
                    class="product-image"
                    loading="lazy"
                    onerror="this.src='/images/placeholder.jpg'"
                >
            </div>
            <div class="product-info">
                <div class="product-category">${product.category_name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}</div>
                <h3 class="product-title">${product.title}</h3>
                <div class="product-price">${this.formatPrice(product.price)}</div>
            </div>
        `;
    
        card.addEventListener('click', () => {
            this.openProductDetail(product.id);
        });
    
        return card;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
     */
    formatPrice(price) {
        if (!price) return '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
        const formatted = Number(price).toLocaleString('ru-RU');
        return `${formatted} ‚Ç¨`; // –ú–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
     */
    openProductDetail(productId) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ localStorage –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        localStorage.setItem('selectedProductId', productId);
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
        // –ú–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –ø–æ–¥ —Å–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        window.location.href = `/product.html?id=${productId}`;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
     */
    setupInfiniteScroll() {
        let scrollTimeout;

        window.addEventListener('scroll', () => {
            // –î–µ–±–∞—É–Ω—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(() => {
                this.checkScroll();
            }, 100);
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä—ã
     */
    checkScroll() {
        if (this.isLoading || !this.hasMorePages) {
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const windowHeight = window.innerHeight;
        const documentHeight = document.documentElement.scrollHeight;

        // –ï—Å–ª–∏ –¥–æ–∫—Ä—É—Ç–∏–ª–∏ –¥–æ 80% —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—â—ë
        const scrollPercent = (scrollTop + windowHeight) / documentHeight;
        
        if (scrollPercent > 0.8) {
            this.loadProducts();
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
     */
    applyFilters(newFilters) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        this.filters = { ...this.filters, ...newFilters };
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        this.currentPage = 1;
        this.hasMorePages = true;
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É
        this.gridElement.innerHTML = '';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–Ω–æ–≤–æ
        this.loadProducts();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∞–¥–µ—Ä
     */
    showLoader() {
        this.loaderElement.classList.add('active');
    }

    /**
     * –°–∫—Ä—ã—Ç—å –ª–æ–∞–¥–µ—Ä
     */
    hideLoader() {
        this.loaderElement.classList.remove('active');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    showEmpty() {
        this.emptyElement.style.display = 'block';
        this.gridElement.style.display = 'none';
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    showError() {
        this.emptyElement.innerHTML = `
            <div class="products-empty-icon">‚ö†Ô∏è</div>
            <p class="products-empty-text">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</p>
            <button onclick="location.reload()" style="margin-top: 20px; padding: 10px 20px; cursor: pointer;">
                –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </button>
        `;
        this.emptyElement.style.display = 'block';
    }
}

// ==================== –£–¢–ò–õ–ò–¢–´ ==================== 

/**
 * –ü–æ–ª—É—á–∏—Ç—å ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ URL –∏–ª–∏ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
 */
function getCategoryIdFromPage() {
    // –í–∞—Ä–∏–∞–Ω—Ç 1: –ò–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const urlParams = new URLSearchParams(window.location.search);
    const categoryFromUrl = urlParams.get('category');
    
    if (categoryFromUrl) {
        return parseInt(categoryFromUrl);
    }
    
    // –í–∞—Ä–∏–∞–Ω—Ç 2: –ò–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const container = document.querySelector('#products-container');
    if (container && container.dataset.categoryId) {
        return parseInt(container.dataset.categoryId);
    }
    
    // –í–∞—Ä–∏–∞–Ω—Ç 3: –ò–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –≤ HTML)
    if (typeof CATEGORY_ID !== 'undefined') {
        return CATEGORY_ID;
    }
    
    return null;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
document.addEventListener('DOMContentLoaded', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const productsContainer = document.querySelector('#products-container');
    
    if (productsContainer) {
        // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryId = getCategoryIdFromPage();
        
        // –°–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤
        window.productsManager = new ProductsManager({
            categoryId: categoryId,
            containerSelector: '#products-container'
        });
        
        console.log('Products manager initialized for category:', categoryId);
    }
});
